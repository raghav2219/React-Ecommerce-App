// Action types
export const ADD_TO_CART = 'ADD_TO_CART';
export const DELETE_CART_ITEM = 'DELETE_CART_ITEM';
export const UPDATE_CART_ITEM = 'UPDATE_CART_ITEM';
export const SET_CART = 'SET_CART';
export const SET_CART_FROM_LOGIN = 'SET_CART_FROM_LOGIN';
export const RESET_CART = 'RESET_CART';
export const SYNC_CART = 'SYNC_CART';

// Action creators
export const resetCart = () => ({
    type: RESET_CART
});

export const syncCart = (cartData) => ({
    type: SYNC_CART,
    payload: cartData
});

// Helper function to get the current cart state from localStorage
const getCartFromLocalStorage = () => {
    try {
        const cart = localStorage.getItem('cart');
        return cart ? JSON.parse(cart) : { items: [], total: 0 };
    } catch (error) {
        console.error('Error parsing cart from localStorage:', error);
        return { items: [], total: 0 };
    }
};

// Helper function to save cart to localStorage
const saveCartToLocalStorage = (cart) => {
    try {
        localStorage.setItem('cart', JSON.stringify({
            items: cart.items || [],
            total: cart.total || 0
        }));
    } catch (error) {
        console.error('Error saving cart to localStorage:', error);
    }
};

// Retrieve initial state from localStorage if available
const getInitialCart = () => {
    try {
        const storedCart = localStorage.getItem("cart");
        if (!storedCart) return [];
        
        const parsed = JSON.parse(storedCart);
        
        // Handle different cart storage formats
        if (Array.isArray(parsed)) {
            // Old format: array of items
            return parsed;
        } else if (parsed && Array.isArray(parsed.items)) {
            // New format: { items: [...], total: number }
            return parsed.items.map(item => ({
                id: item.id || item.productId,
                title: item.title || item.productName || 'Product',
                price: item.price || 0,
                qty: item.quantity || item.qty || 1,
                image: item.image || '',
                ...item
            }));
        } else {
            console.warn('Unexpected cart format in localStorage:', parsed);
            return [];
        }
    } catch (error) {
        console.error('Error parsing cart from localStorage:', error);
        return [];
    }
};

// Action creator for setting cart from login
export const setCartFromLogin = (cartData) => {
    // Ensure we always have a consistent structure
    const payload = Array.isArray(cartData) 
        ? { items: cartData, total: 0 } 
        : cartData || { items: [], total: 0 };
        
    return {
        type: SET_CART_FROM_LOGIN,
        payload: payload
    };
};

// Sync cart with MongoDB
export const syncWithMongoDB = (cartItems) => {
    return async (dispatch, getState) => {
        try {
            const token = localStorage.getItem('token');
            const user = JSON.parse(localStorage.getItem('user') || '{}');
            const userId = user?._id || user?.id;
            
            if (!token || !userId) {
                console.log('No token or user ID, skipping cart sync');
                return { success: false, message: 'User not authenticated' };
            }

            // Get the latest cart state
            const currentCart = getState().handleCart || [];
            const itemsToSync = Array.isArray(cartItems) ? cartItems : currentCart;

            // Transform cart items to match backend format
            const cartData = {
                items: itemsToSync.map(item => ({
                    productId: item.id || item.productId,
                    productName: item.title || item.productName || 'Product',
                    quantity: item.qty || item.quantity || 1,
                    price: item.price || 0,
                    image: item.image || ''
                })),
                total: itemsToSync.reduce((sum, item) => {
                    const price = parseFloat(item.price) || 0;
                    const qty = parseInt(item.qty || item.quantity || 1, 10);
                    return sum + (price * qty);
                }, 0)
            };
            
            const response = await fetch(`http://localhost:5000/api/cart/update/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(cartData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error('Server error syncing cart:', errorText);
                throw new Error('Failed to sync cart with server');
            }
            
            const data = await response.json();
            console.log('Cart synced successfully:', data);
            
            // Update local storage with server response if needed
            if (data.cart) {
                const updatedCart = {
                    items: data.cart.items.map(item => ({
                        id: item.productId,
                        title: item.productName,
                        price: item.price,
                        qty: item.quantity,
                        image: item.image
                    })),
                    total: data.cart.total || 0
                };
                localStorage.setItem('cart', JSON.stringify(updatedCart));
                return { success: true, data: updatedCart };
            }
            
            return { success: true, data: cartData };
        } catch (error) {
            console.error('Error syncing cart:', error);
            throw error;
        }
    };
};

// Cart reducer
const handleCart = (state = getInitialCart(), action) => {
    // Ensure state is always an array
    const currentState = Array.isArray(state) ? state : [];
    let newState;
    
    // Helper function to sync cart with backend
    const syncCart = async (items) => {
        try {
            const result = await syncWithMongoDB(items)(() => {}, () => ({}));
            if (result?.success) {
                return result.data.items || [];
            }
        } catch (error) {
            console.error('Error syncing cart:', error);
        }
        return items;
    };

    try {
        switch (action.type) {
            case RESET_CART:
                // Clear cart from localStorage
                localStorage.removeItem('cart');
                
                // If user is logged in, sync empty cart with server
                const user = JSON.parse(localStorage.getItem('user') || '{}');
                if (user && (user.id || user._id)) {
                    // Use the helper function to sync with backend
                    syncWithMongoDB([])(() => {}, () => ({}));
                }
                
                return [];
                
            case ADD_TO_CART:
            case "ADDITEM": {
                try {
                    const product = action.payload;
                    if (!product || !product.id) {
                        console.error('Invalid product data:', product);
                        return currentState;
                    }

                    // Check if product already in cart
                    const exist = currentState.find((x) => x && x.id === product.id);
                    
                    if (exist) {
                        // Increase the quantity
                        newState = currentState.map((x) =>
                            x.id === product.id 
                                ? { 
                                    ...x, 
                                    qty: (x.qty || 1) + 1,
                                    // Preserve other properties
                                    ...(product.image && !x.image && { image: product.image }),
                                    ...(product.title && !x.title && { title: product.title }),
                                    ...(product.price !== undefined && { price: product.price })
                                } 
                                : x
                        );
                    } else {
                        // Add new item to cart
                        newState = [
                            ...currentState, 
                            { 
                                ...product, 
                                qty: 1,
                                // Ensure required fields
                                id: product.id,
                                title: product.title || 'Product',
                                price: product.price || 0,
                                image: product.image || ''
                            }
                        ];
                    }
                    
                    // Save to localStorage
                    const cartData = {
                        items: newState,
                        total: newState.reduce((sum, item) => sum + (item.price * item.qty), 0)
                    };
                    saveCartToLocalStorage(cartData);
                    
                    // Sync with server
                    syncWithMongoDB(newState)(() => {}, () => ({}));
                    
                    return newState;
                } catch (error) {
                    console.error('Error in ADD_TO_CART:', error);
                    return currentState;
                }
            }
                
            case DELETE_CART_ITEM:
            case "DELITEM": {
                try {
                    const productId = action.payload?.id || action.payload;
                    if (!productId) {
                        console.error('No product ID provided for removal');
                        return currentState;
                    }

                    // Filter out the item to remove
                    newState = currentState.filter(item => item && item.id !== productId);
                    
                    // Save to localStorage
                    const cartData = {
                        items: newState,
                        total: newState.reduce((sum, item) => sum + (item.price * item.qty), 0)
                    };
                    saveCartToLocalStorage(cartData);
                    
                    // Sync with server
                    syncWithMongoDB(newState)(() => {}, () => ({}));
                    
                    return newState;
                } catch (error) {
                    console.error('Error in DELETE_CART_ITEM:', error);
                    return currentState;
                }
            }
                
            case UPDATE_CART_ITEM: {
                try {
                    const { productId, quantity } = action.payload;
                    if (!productId || quantity === undefined) {
                        console.error('Invalid update cart item payload:', action.payload);
                        return currentState;
                    }

                    // Update the quantity of the specified item
                    newState = currentState.map(item => 
                        item.id === productId 
                            ? { ...item, qty: Math.max(1, quantity) } 
                            : item
                    );
                    
                    // Save to localStorage
                    const cartData = {
                        items: newState,
                        total: newState.reduce((sum, item) => sum + (item.price * item.qty), 0)
                    };
                    saveCartToLocalStorage(cartData);
                    
                    // Sync with server
                    syncWithMongoDB(newState)(() => {}, () => ({}));
                    
                    return newState;
                } catch (error) {
                    console.error('Error in UPDATE_CART_ITEM:', error);
                    return currentState;
                }
            }
                
            case SYNC_CART: {
                try {
                    const cartData = action.payload;
                    if (!cartData) {
                        console.error('No cart data provided for sync');
                        return getInitialCart();
                    }

                    // Transform cart data to match our format if needed
                    const items = Array.isArray(cartData.items) 
                        ? cartData.items.map(item => ({
                            id: item.productId || item.id,
                            title: item.productName || item.title || 'Product',
                            price: parseFloat(item.price) || 0,
                            qty: parseInt(item.quantity || item.qty || 1, 10),
                            image: item.image || ''
                        }))
                        : [];

                    // Calculate total if not provided
                    const total = cartData.total || items.reduce((sum, item) => {
                        return sum + (item.price * item.qty);
                    }, 0);

                    // Save to localStorage
                    const updatedCart = { items, total };
                    saveCartToLocalStorage(updatedCart);

                    // Sync with server if user is logged in
                    const user = JSON.parse(localStorage.getItem('user') || '{}');
                    if (user && (user.id || user._id)) {
                        syncWithMongoDB(items)(() => {}, () => ({}));
                    }

                    return items;
                } catch (error) {
                    console.error('Error in SYNC_CART:', error);
                    return currentState;
                }
            }
                
            case SET_CART: {
                try {
                    // Directly set the cart items
                    const items = Array.isArray(action.payload) ? action.payload : [];
                    
                    // Calculate total
                    const total = items.reduce((sum, item) => {
                        const price = parseFloat(item.price) || 0;
                        const qty = parseInt(item.qty || item.quantity || 1, 10);
                        return sum + (price * qty);
                    }, 0);
                    
                    // Save to localStorage
                    const cartData = { items, total };
                    saveCartToLocalStorage(cartData);
                    
                    // Sync with server if user is logged in
                    const user = JSON.parse(localStorage.getItem('user') || '{}');
                    if (user && (user.id || user._id)) {
                        syncWithMongoDB(items)(() => {}, () => ({}));
                    }
                    
                    return items;
                } catch (error) {
                    console.error('Error in SET_CART:', error);
                    return currentState;
                }
            }
                
            case SET_CART_FROM_LOGIN: {
                try {
                    // Handle different payload formats
                    let items = [];
                    let total = 0;
                    
                    if (Array.isArray(action.payload)) {
                        // If payload is an array, use it as items
                        items = action.payload;
                    } else if (action.payload && Array.isArray(action.payload.items)) {
                        // If payload has items array, use it
                        items = action.payload.items;
                        total = Number(action.payload.total) || 0;
                    }
                    
                    // Transform cart items to match frontend format
                    const transformedItems = items.map(item => ({
                        id: item.productId || item.id || item._id,
                        title: item.productName || item.title || 'Product',
                        price: parseFloat(item.price) || 0,
                        qty: parseInt(item.quantity || item.qty || 1, 10),
                        image: item.image || ''
                    }));
                    
                    // Calculate total if not provided
                    const calculatedTotal = total || transformedItems.reduce((sum, item) => {
                        return sum + (item.price * item.qty);
                    }, 0);
                    
                    // Save to localStorage with consistent structure
                    const cartData = {
                        items: transformedItems,
                        total: calculatedTotal
                    };
                    
                    saveCartToLocalStorage(cartData);
                    
                    // If we have items, sync with backend
                    if (transformedItems.length > 0) {
                        const user = JSON.parse(localStorage.getItem('user') || '{}');
                        if (user && (user.id || user._id)) {
                            syncWithMongoDB(transformedItems)(() => {}, () => ({}));
                        }
                    }
                    
                    return transformedItems;
                } catch (error) {
                    console.error('Error in SET_CART_FROM_LOGIN:', error);
                    return currentState;
                }
            }
                
            default:
                return currentState;
        }
    } catch (error) {
        console.error('Error in cart reducer:', error);
        return currentState;
    }
};

export default handleCart;
